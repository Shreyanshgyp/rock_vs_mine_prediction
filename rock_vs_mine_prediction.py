# -*- coding: utf-8 -*-
"""Rock vs Mine Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ESmq-T_wLQTjHxmcy-03X2GWpYfIqH82

Importing the dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Data Processing"""

import pandas as pd

# Load dataset into a DataFrame
sonar_data = pd.read_csv('D:\\Project\\sonar data.csv', header=None)

sonar_data.head()

#number of rows and columns
sonar_data.shape

sonar_data.describe() #describe --> statistical measure of the data

sonar_data[60].value_counts()

"""M -->Mine

R -->Rock
"""

sonar_data.groupby(60).mean()

# separating data and Labels
X = sonar_data.drop(columns=60,axis=1)
Y = sonar_data[60]

print(X)
print(Y)

"""Training and Test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.1, stratify=Y,random_state=1)

print(X.shape, X_train.shape, X_test.shape)

print(X_train)
print(Y_train)

"""Model Training --> Logistics Regression"""

model = LogisticRegression()

#training the logistic Regression model with training data
model.fit(X_train,Y_train)

"""Model Evaluation"""

#accuracy on  training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)

print('Accuracy on training data :', training_data_accuracy)

#accuracy on  training data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction,Y_test)

print('Accuracy on training data :', test_data_accuracy)

"""Making a Predictive System"""

input_data = (0.0519,0.0548,0.0842,0.0319,0.1158,0.0922,0.1027,0.0613,0.1465,0.2838,0.2802,0.3086,0.2657,0.3801,0.5626,0.4376,0.2617,0.1199,0.6676,0.9402,0.7832,0.5352,0.6809,0.9174,0.7613,0.8220,0.8872,0.6091,0.2967,0.1103,0.1318,0.0624,0.0990,0.4006,0.3666,0.1050,0.1915,0.3930,0.4288,0.2546,0.1151,0.2196,0.1879,0.1437,0.2146,0.2360,0.1125,0.0254,0.0285,0.0178,0.0052,0.0081,0.0120,0.0045,0.0121,0.0097,0.0085,0.0047,0.0048,0.0053)
#changing the input_data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the np array as we  are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if(prediction[0]== 'R'):
  print('The object is a Rock')
else:
  print('The object is a Mine')